[{"name": "app.py", "content": "import prices\nfrom shiny import reactive, render\nfrom shiny.express import input,ui\nimport random\nfrom datetime import datetime\nfrom faicons import icon_svg\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom scipy import stats\nfrom shinywidgets import render_plotly\nfrom shinyswatch import theme\n\nDEQUE_SIZE: int = 5\nreactive_value_wrapper_aapl= reactive.value(deque(maxlen=DEQUE_SIZE))\nreactive_value_wrapper_nvda= reactive.value(deque(maxlen=DEQUE_SIZE))\nreactive_value_wrapper_msft= reactive.value(deque(maxlen=DEQUE_SIZE))\n\n\nstocks={\"NVDA\":\"NVDA\",\"AAPL\":\"AAPL\",\"MSFT\":\"MSFT\"}\n\n\n# ------------------------------------------------\n# This refreshes the page\n# ------------------------------------------------\n\nUPDATE_INTERVAL_SECS: int = 30\n\n\n\n\n# ------------------------------------------------\n# Define the Shiny UI Page layout - Page Options\n# ------------------------------------------------\n\n\nui.page_opts(title=\"Stock Price Page Live\", fillable=True, theme=theme.lumen)\n\n# ------------------------------------------------\n# Define the Shiny UI Page layout - Sidebar\n# ------------------------------------------------\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Stock prices\", class_=\"text-center\")\n    ui.p(\n        \"A demonstration of real-time stock quotes.\",\n        class_=\"text-center\",\n    )\n\n    ui.p(\n        \"Data refreshes in 30 second intervals.\",\n        class_=\"text-center\",\n    )\n\n    ui.input_selectize(\"stocks\",\"Choose a stock\",stocks, multiple=False)\n    \n   \n\n#---------------------------------------------------------------------\n# In Shiny Express, everything not in the sidebar is in the main panel\n#---------------------------------------------------------------------\n\nwith ui.layout_columns():\n    with ui.value_box( theme=\"bg-gradient-blue-purple\"):\n        @render.text\n        def value():\n            return \"You choose: \" + str(input.stocks())\n\n        @render.text\n        def display_aapl2():\n            \"\"\"Get the latest reading\"\"\"\n            deque_snapshot,df, latest_price= reactive_calc_combined()\n            return f\"${str(latest_price['price'])}\"\n\n\n    with ui.card(full_screen=True):\n       \n\n        @render.text\n        def value2():\n            return \"You choose: \" + str(input.stocks())\n          \n        @render.data_frame\n        def display_df2():\n            \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n            deque_snapshot,df, latest_price= reactive_calc_combined()\n            pd.set_option('display.width', None)        # Use maximum width\n            return render.DataGrid( df,width=\"100%\")\n    \nwith ui.card(full_screen=True):\n       \n        @render_plotly\n        def display_plott():\n\n            deque_snapshot,df, latest_price = reactive_calc_combined()\n\n            if not df.empty:\n            # Convert the 'timestamp' column to datetime for better plotting\n                fig=px.line(df,x=\"timestamp\", y=\"price\", title=\"Chart\")\n                return fig\n\n\n@reactive.calc()\ndef reactive_calc_combined():\n \n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # call the methods to get the data\n    \n    \n    \n    new_price=prices.get_price(str(input.stocks()))\n\n    if str(input.stocks())==\"NVDA\":\n\n        reactive_value_wrapper_nvda.get().append(new_price)\n        deque_snapshot=reactive_value_wrapper_nvda.get()\n        df=pd.DataFrame(deque_snapshot)\n        latest_price=new_price\n        \n        return deque_snapshot,df, latest_price\n    \n    elif str(input.stocks())==\"AAPL\":\n\n        reactive_value_wrapper_aapl.get().append(new_price)\n        deque_snapshot=reactive_value_wrapper_aapl.get()\n        df=pd.DataFrame(deque_snapshot)\n        latest_price=new_price\n        \n        return deque_snapshot,df, latest_price\n    \n    elif str(input.stocks())==\"MSFT\":\n\n        reactive_value_wrapper_msft.get().append(new_price)\n        deque_snapshot=reactive_value_wrapper_msft.get()\n        df=pd.DataFrame(deque_snapshot)\n        latest_price=new_price\n        \n        return deque_snapshot,df, latest_price\n    ", "type": "text"}, {"name": "prices.py", "content": "import requests\nimport json\nfrom datetime import datetime\n\n\nU_value=\"&apikey=6bf3bdff97a14db19bdea24ba1900629\"\n\n\n\n\ndef get_price(ticker):\n\n    ticker_symbol=ticker\n\n    url=f\"https://api.twelvedata.com/price?symbol={ticker_symbol}{U_value}\"\n    response = requests.get(url)\n\n    #print(f\"Status Code: {response.status_code}\")\n    #print(f\"Response Body: {response.json()}\")\n\n    price=response.json()\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    price_dict = {'price' : float(price['price']), 'timestamp':timestamp}\n\n    #print(appl_dict)\n    return price_dict", "type": "text"}]